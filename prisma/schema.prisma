datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
    provider = "prisma-client-js"
}

// User parts
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime

    // CECI EST UNE FK
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@map("sessions")
}

model User {
    id              String    @id @default(cuid())
    name            String?
    email           String?   @unique
    email_verified  DateTime?
    image           String?
    phone_indicator String?
    phone           String?
    birth_date      DateTime?
    role            Role      @default(USER)
    created_at      DateTime  @default(now())
    updated_at      DateTime  @updatedAt

    // CEUX CI N'APPARAISSENT PAS DANS LA BD
    accounts         Account[]
    sessions         Session[]
    user_address     user_address[]
    user_payment     user_payment[]
    shopping_session shopping_session[]
    order_details    order_details[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationTokens")
}

// From Swagger and dbdiagram.io
enum Role {
    USER
    MODERATOR
    ADMIN

    @@map("roles")
}

model user_address {
    id            String  @id @default(cuid())
    address_line1 String
    address_line2 String?
    city          String
    postal_code   String
    country       String
    telephone     String

    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String

    @@map("user_addresses")
}

model user_payment {
    id           String   @id @default(cuid())
    payment_type String
    provider     String
    account_no   Int
    expiry       DateTime

    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String

    @@map("user_payments")
}

model product_category {
    id         String   @id @default(cuid())
    name       String
    desc       String
    created_at DateTime
    updated_at DateTime
    deleted_at DateTime

    product product[]

    @@map("product_categories")
}

model product_inventory {
    id         String   @id @default(cuid())
    quantity   Int
    created_at DateTime
    updated_at DateTime
    deleted_at DateTime

    product product[]

    @@map("product_inventories")
}

model discount {
    id               String   @id @default(cuid())
    name             String
    desc             String
    discount_percent Float
    active           Boolean
    created_at       DateTime
    updated_at       DateTime
    deleted_at       DateTime

    product product[]

    @@map("discounts")
}

model product {
    id         String   @id @default(cuid())
    name       String
    desc       String
    SKU        String
    price      Float
    created_at DateTime
    updated_at DateTime
    deleted_at DateTime

    cart_item   cart_item[]
    order_items order_items[]

    category     product_category  @relation(fields: [category_id], references: [id], onDelete: Cascade)
    category_id  String
    inventory    product_inventory @relation(fields: [inventory_id], references: [id], onDelete: Cascade)
    inventory_id String
    discount     discount?         @relation(fields: [discount_id], references: [id], onDelete: Cascade)
    discount_id  String?

    @@map("products")
}

model shopping_session {
    id         String   @id @default(cuid())
    total      Float
    created_at DateTime
    updated_at DateTime

    cart_item cart_item[]

    user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id String

    @@map("shopping_sessions")
}

model cart_item {
    id         String   @id @default(cuid())
    quantity   Int
    created_at DateTime
    updated_at DateTime

    shopping_session    shopping_session @relation(fields: [shopping_session_id], references: [id], onDelete: Cascade)
    shopping_session_id String
    product             product          @relation(fields: [product_id], references: [id], onDelete: Cascade)
    product_id          String
}

model payment_details {
    id         String   @id @default(cuid())
    order_id   Int
    amount     Int
    provider   String
    status     String
    created_at DateTime
    updated_at DateTime

    order_details order_details[]
}

model order_details {
    id         String   @id @default(cuid())
    total      Float
    created_at DateTime
    updated_at DateTime

    order_items order_items[]

    user               User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id            String
    payment_details    payment_details? @relation(fields: [payment_details_id], references: [id], onDelete: Cascade)
    payment_details_id String?
}

model order_items {
    id         String   @id @default(cuid())
    quantity   Int
    created_at DateTime
    updated_at DateTime

    order_details    order_details @relation(fields: [order_details_id], references: [id], onDelete: Cascade)
    order_details_id String
    product          product       @relation(fields: [product_id], references: [id], onDelete: Cascade)
    product_id       String
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
    // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
    provider = "prisma-client-js"
}

// User parts
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    phoneIndicator String?
    phone          String?
    birthDate      DateTime?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    role           Role      @default(USER)
    accounts       Account[]
    sessions       Session[]
    addresses      Address[]
    orders          Order[]
    reviews         Review[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

// From Swagger
enum Role {
    USER
    MODERATOR
    ADMIN

    @@map("roles")
}

model Address {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    published Boolean @default(false)
    name      String?
    address   String
    zipcode   String
    country   String
    isBilling Boolean @default(true)

    user   User    @relation(fields: [userId], references: [id])
    userId String  @db.ObjectId
    Order  Order[]

    @@map("addresses")
}

model Review {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    mark      Int
    title     String
    comment   String
    upVotes   Int?
    downVotes Int?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user      User     @relation(fields: [userId], references: [id])
    userId    String   @db.ObjectId
    Product   Product? @relation(fields: [productId], references: [id])
    productId String?  @db.ObjectId

    @@map("reviews")
}

enum Category {
    MAKEUP
    PAF
    ACCESSORIES

    @@map("categories")
}

model Product {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    reference    String
    imageUrls    String[]
    title        String
    description  String
    quantity     Int
    price        String
    is_available Boolean    @default(false)
    categories   Category[]
    reviews      Review[]
    Order        Order?     @relation(fields: [orderId], references: [id])
    orderId      String?    @db.ObjectId

    @@map("products")
}

enum OrderStatus {
    PRECOMMAND
    PLACED
    APPROVED
    PREPARATION
    SHIPPED
    DELIVERED
    CANCELLED
    REFUNDED

    @@map("orderstatuses")
}

model Order {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    reference     String
    order_date    DateTime
    shipping_date DateTime?
    delivery_date DateTime?
    returned      Boolean      @default(false)
    status        OrderStatus?
    products      Product[]

    address   Address @relation(fields: [addressId], references: [id])
    addressId String  @db.ObjectId
    User      User?   @relation(fields: [userId], references: [id])
    userId    String? @db.ObjectId
}
